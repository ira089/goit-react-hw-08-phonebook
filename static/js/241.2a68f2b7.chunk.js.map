{"version":3,"file":"static/js/241.2a68f2b7.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","../node_modules/nanoid/index.browser.js","components/Button/Button.jsx","components/AddContactForm/AddContactForm.jsx","components/ContactList/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","../node_modules/@chakra-ui/button/src/button-group.tsx","webpack://react-homework-template/./src/components/Modal/Modal.module.css?28d7","../node_modules/@chakra-ui/layout/src/stack/stack-item.tsx","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/layout/src/stack/stack.tsx","../node_modules/@chakra-ui/layout/src/stack/stack.utils.tsx","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs","components/ChangeContactForm/ChangeContactForm.jsx","components/Modal/Modal.jsx","components/ContactItems/ContactItems.jsx","components/ContactList/ContactList.jsx","../node_modules/@chakra-ui/layout/src/container.tsx","../node_modules/@chakra-ui/layout/src/heading.tsx","Pages/ContactPage/ContactPage.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts;\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = state => {\n  const filterState = selectFilter(state);\n  const { items } = selectContacts(state);\n\n  if (!filterState) {\n    return items;\n  }\n  const normalizedFilter = filterState.toLowerCase();\n  return items.filter(contact =>\n    contact.name.toLocaleLowerCase().includes(normalizedFilter)\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import React from 'react';\nimport { Button } from '@chakra-ui/react';\n\nexport const ButtonSubmit = ({ type = 'submit', children }) => {\n  return (\n    <Button colorScheme=\"teal\" variant=\"solid\" size=\"xs\" type={type}>\n      {children}\n    </Button>\n  );\n};\n","import { useState, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContactsThunk } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { nanoid } from 'nanoid';\nimport { ButtonSubmit } from 'components/Button/Button';\nimport { Input } from '@chakra-ui/react';\n\nconst AddContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const { items } = useSelector(selectContacts);\n  // console.log(items);\n  const dispatch = useDispatch();\n\n  const handleChangeName = ({ target }) => {\n    const { value } = target;\n    setName(value);\n  };\n\n  const handleChangeNumber = ({ target }) => {\n    const { value } = target;\n    setNumber(value);\n  };\n\n  const isDublicate = evt => {\n    // console.log(evt);\n    const normalizedName = evt.toLowerCase();\n    const dublicate = items.find(\n      contact => contact.name.toLocaleLowerCase() === normalizedName\n    );\n    return dublicate;\n  };\n\n  const addTask = e => {\n    e.preventDefault();\n    if (isDublicate(name)) {\n      return alert(`${name} is already in contacts`);\n    }\n    dispatch(addContactsThunk({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  const contactNameId = useMemo(() => nanoid(), []);\n  const contactNumberId = useMemo(() => nanoid(), []);\n\n  return (\n    <form onSubmit={addTask}>\n      <label htmlFor={contactNameId}>\n        Name\n        <Input\n          isInvalid\n          errorBorderColor=\"aquamarine\"\n          placeholder=\"Name\"\n          onChange={handleChangeName}\n          value={name}\n          name=\"name\"\n          required\n          id={contactNameId}\n          type=\"text\"\n        />\n      </label>\n\n      <label htmlFor={contactNumberId}>\n        Phone\n        <Input\n          mb={4}\n          isInvalid\n          errorBorderColor=\"aquamarine\"\n          onChange={handleChangeNumber}\n          value={number}\n          name=\"number\"\n          id={contactNumberId}\n          placeholder=\"Phone\"\n          required\n        />\n      </label>\n      <ButtonSubmit>Add contact</ButtonSubmit>\n    </form>\n  );\n};\n\nexport default AddContactForm;\n","import { useDispatch } from 'react-redux';\nimport { addFilter } from '../../redux/contacts/filterSlice';\nimport { Input } from '@chakra-ui/react';\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const changeFitler = ({ target }) => {\n    dispatch(addFilter(target.value));\n  };\n\n  return (\n    <>\n      <p>Find contacts by name</p>\n      <Input\n        w={300}\n        isInvalid\n        errorBorderColor=\"aquamarine\"\n        placeholder=\"Search\"\n        onChange={changeFitler}\n        name=\"filter\"\n      />\n    </>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemStyleObject,\n  ThemingProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport { ButtonGroupContext, ButtonGroupProvider } from \"./button-context\"\nimport { ButtonGroupOptions } from \"./button-types\"\n\nexport interface ButtonGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Button\">,\n    ButtonGroupOptions {}\n\nconst attachedStyles: Record<string, SystemStyleObject> = {\n  horizontal: {\n    \"> *:first-of-type:not(:last-of-type)\": { borderEndRadius: 0 },\n    \"> *:not(:first-of-type):not(:last-of-type)\": { borderRadius: 0 },\n    \"> *:not(:first-of-type):last-of-type\": { borderStartRadius: 0 },\n  },\n  vertical: {\n    \"> *:first-of-type:not(:last-of-type)\": { borderBottomRadius: 0 },\n    \"> *:not(:first-of-type):not(:last-of-type)\": { borderRadius: 0 },\n    \"> *:not(:first-of-type):last-of-type\": { borderTopRadius: 0 },\n  },\n}\n\nconst gapStyles = {\n  horizontal: (spacing: any): SystemStyleObject => ({\n    \"& > *:not(style) ~ *:not(style)\": { marginStart: spacing },\n  }),\n  vertical: (spacing: any): SystemStyleObject => ({\n    \"& > *:not(style) ~ *:not(style)\": { marginTop: spacing },\n  }),\n}\n\nexport const ButtonGroup = forwardRef<ButtonGroupProps, \"div\">(\n  function ButtonGroup(props, ref) {\n    const {\n      size,\n      colorScheme,\n      variant,\n      className,\n      spacing = \"0.5rem\",\n      isAttached,\n      isDisabled,\n      orientation = \"horizontal\",\n      ...rest\n    } = props\n\n    const _className = cx(\"chakra-button__group\", className)\n\n    const context: ButtonGroupContext = useMemo(\n      () => ({ size, colorScheme, variant, isDisabled }),\n      [size, colorScheme, variant, isDisabled],\n    )\n\n    let groupStyles: SystemStyleObject = {\n      display: \"inline-flex\",\n      ...(isAttached\n        ? attachedStyles[orientation]\n        : gapStyles[orientation](spacing)),\n    }\n\n    const isVertical = orientation === \"vertical\"\n\n    return (\n      <ButtonGroupProvider value={context}>\n        <chakra.div\n          ref={ref}\n          role=\"group\"\n          __css={groupStyles}\n          className={_className}\n          data-attached={isAttached ? \"\" : undefined}\n          data-orientation={orientation}\n          flexDir={isVertical ? \"column\" : undefined}\n          {...rest}\n        />\n      </ButtonGroupProvider>\n    )\n  },\n)\n\nButtonGroup.displayName = \"ButtonGroup\"\n","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"Modal_overlay__r63M6\",\"modal\":\"Modal_modal__DJDMv\",\"btnClose\":\"Modal_btnClose__oHdcJ\"};","import { ChakraComponent, chakra } from \"@chakra-ui/system\"\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nStackItem.displayName = \"StackItem\"\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cloneElement, Fragment, useMemo } from \"react\"\n\nimport { StackItem } from \"./stack-item\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   * @default \"0.5rem\"\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   * @default \"column\"\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   *\n   * @default false\n   *\n   * @deprecated - Use `direction=\"row\"` or `HStack` instead\n   */\n  isInline?: boolean\n}\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children)\n    return shouldUseChildren\n      ? validChildren\n      : validChildren.map((child, index) => {\n          // Prefer provided child key, fallback to index\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n          const isLast = index + 1 === validChildren.length\n          const wrappedChild = <StackItem key={key}>{child}</StackItem>\n          const _child = shouldWrapChildren ? wrappedChild : child\n\n          if (!hasDivider) return _child\n\n          const clonedDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerStyle,\n            },\n          )\n\n          const _divider = isLast ? null : clonedDivider\n\n          return (\n            <Fragment key={key}>\n              {_child}\n              {_divider}\n            </Fragment>\n          )\n        })\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children,\n  ])\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={direction}\n      flexWrap={wrap}\n      gap={hasDivider ? undefined : spacing}\n      className={_className}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nStack.displayName = \"Stack\"\n","import { ResponsiveValue, SystemProps } from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\ninterface Options {\n  spacing: SystemProps[\"margin\"]\n  direction: StackDirection\n}\n\nexport function getDividerStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n  }\n\n  return {\n    \"&\": mapResponsive(\n      direction,\n      (value: keyof typeof dividerStyles) => dividerStyles[value],\n    ),\n  }\n}\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { changeContactsThunk } from '../../redux/contacts/operations';\nimport { ButtonSubmit } from 'components/Button/Button';\nimport { Input, Stack } from '@chakra-ui/react';\n\nconst ChangeContactForm = ({ id, nameChange, numberChange, close }) => {\n  const [name, setName] = useState(nameChange);\n  const [number, setNumber] = useState(numberChange);\n\n  const dispatch = useDispatch();\n\n  const handleChangeName = ({ target }) => {\n    const { value } = target;\n    // console.log(value);\n    setName(value);\n  };\n\n  const handleChangeNumber = ({ target }) => {\n    const { value } = target;\n    setNumber(value);\n  };\n\n  const changeContact = e => {\n    e.preventDefault();\n\n    dispatch(changeContactsThunk({ id, name, number }));\n    setName('');\n    setNumber('');\n    close();\n  };\n\n  return (\n    <form onSubmit={changeContact}>\n      <Stack spacing={4} mb={4}>\n        <label>\n          Name\n          <Input\n            variant=\"outline\"\n            isInvalid\n            errorBorderColor=\"aquamarine\"\n            onChange={handleChangeName}\n            value={name}\n            name=\"name\"\n            type=\"text\"\n            autoComplete=\"off\"\n          />\n        </label>\n        <label>\n          Phone\n          <Input\n            variant=\"outline\"\n            isInvalid\n            errorBorderColor=\"aquamarine\"\n            onChange={handleChangeNumber}\n            value={number}\n            name=\"number\"\n            autoComplete=\"off\"\n          />\n        </label>\n      </Stack>\n      <ButtonSubmit>Change contact</ButtonSubmit>\n    </form>\n  );\n};\n\nexport default ChangeContactForm;\n","import React from 'react';\n// import {\n//   Modal,\n//   ModalOverlay,\n//   ModalContent,\n//   ModalHeader,\n//   ModalFooter,\n//   ModalBody,\n//   ModalCloseButton,\n//   useDisclosure,\n// } from '@chakra-ui/react';\nimport styles from './Modal.module.css';\nimport ChangeContactForm from 'components/ChangeContactForm/ChangeContactForm';\n\n// const Modalwindow = ({ close, id, name, number }) => {\n\n//   return (\n//     <Modal className={styles.overlay} isOpen={isOpen} onClose={onClose}>\n//       <ModalOverlay />\n//       <ModalContent>\n//         <ModalCloseButton />\n//         <ModalBody>\n//           <ChangeContactForm id={id} nameChange={name} numberChange={number} />\n//         </ModalBody>\n//       </ModalContent>\n//     </Modal>\n//   );\n// };\n\nconst Modalwindow = ({ close, id, name, number }) => {\n  return (\n    <div className={styles.overlay}>\n      <button className={styles.btnClose} onClick={close}>\n        X\n      </button>\n      <ChangeContactForm\n        id={id}\n        nameChange={name}\n        numberChange={number}\n        close={close}\n      />\n    </div>\n  );\n};\nexport default Modalwindow;\n","import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { deleteContactsThunk } from '../../redux/contacts/operations';\nimport { ButtonGroup, Button } from '@chakra-ui/react';\nimport Modalwindow from 'components/Modal/Modal';\n\nconst ContactItems = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const showModal = () => {\n    setModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  const onDeleteContact = id => {\n    // console.log(id);\n    dispatch(deleteContactsThunk(id));\n  };\n\n  const onChangeContact = id => {\n    // console.log(id);\n    showModal();\n  };\n\n  return (\n    <>\n      <li key={id} id={id}>\n        {name}: {number}{' '}\n        <ButtonGroup variant=\"outline\" spacing=\"2\">\n          <Button\n            colorScheme=\"teal\"\n            variant=\"solid\"\n            size=\"xs\"\n            onClick={() => onDeleteContact(id)}\n            type=\"button\"\n          >\n            Delete\n          </Button>\n          <Button\n            colorScheme=\"teal\"\n            variant=\"solid\"\n            size=\"xs\"\n            onClick={() => onChangeContact(id)}\n            type=\"button\"\n          >\n            Change\n          </Button>\n        </ButtonGroup>\n      </li>\n      {modalOpen && (\n        <Modalwindow close={closeModal} id={id} name={name} number={number} />\n      )}\n    </>\n  );\n};\n\nexport default ContactItems;\n","import { useSelector, useDispatch } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport {\n  selectFilteredContacts,\n  selectContacts,\n} from '../../redux/contacts/selectors';\nimport { getContactsThunk } from '../../redux/contacts/operations';\nimport styles from './ContactList.module.css';\nimport ContactItems from '../ContactItems/ContactItems';\n\nconst ContactList = () => {\n  const { isLoading, error } = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  const itemsVisible = useSelector(selectFilteredContacts);\n  // console.log(itemsVisible);\n\n  const elements = itemsVisible.map(item => (\n    <ContactItems\n      key={item.id}\n      id={item.id}\n      number={item.number}\n      name={item.name}\n    />\n  ));\n\n  const isItemsVisible = Boolean(itemsVisible.length);\n\n  return (\n    <>\n      {isLoading && <p>...Loading</p>}\n      {error && <p>{error.message}</p>}\n      {isItemsVisible && <ul className={styles.list}>{elements}</ul>}\n    </>\n  );\n};\n\nexport default ContactList;\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface ContainerProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Container\"> {\n  /**\n   * If `true`, container will center its children\n   * regardless of their width.\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\n/**\n * Layout component used to wrap app or website content\n *\n * It sets `margin-left` and `margin-right` to `auto`,\n * to keep its content centered.\n *\n * It also sets a default max-width of `60ch` (60 characters).\n *\n * @see Docs https://chakra-ui.com/docs/components/container\n */\nexport const Container = forwardRef<ContainerProps, \"div\">(function Container(\n  props,\n  ref,\n) {\n  const { className, centerContent, ...rest } = omitThemingProps(props)\n\n  const styles = useStyleConfig(\"Container\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-container\", className)}\n      {...rest}\n      __css={{\n        ...styles,\n        ...(centerContent && {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }),\n      }}\n    />\n  )\n})\n\nContainer.displayName = \"Container\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","import React from 'react';\nimport AddContactForm from 'components/AddContactForm/AddContactForm';\nimport Filter from 'components/ContactList/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { Box, Heading, Container } from '@chakra-ui/react';\n\nconst ContactPage = () => {\n  return (\n    <Container p={4}>\n      <Box>\n        <Heading fontSize={28}>Phonebook</Heading>\n      </Box>\n      <Box mb={6} w=\"50%\">\n        <AddContactForm />\n      </Box>\n      <Box mt={4}>\n        <Heading fontSize={20}>Contact</Heading>\n      </Box>\n      <Box>\n        <Filter />\n      </Box>\n      <Box>\n        <ContactList />\n      </Box>\n    </Container>\n  );\n  // return (\n  //   <div className={styles.wrap}>\n  //     <h1>Phonebook</h1>\n  //     <AddContactForm />\n\n  //     <h2>Contacts</h2>\n  //     <Filter />\n  //     <ContactList />\n  //   </div>\n  // );\n};\nexport default ContactPage;\n"],"names":["selectContacts","state","contacts","selectFilteredContacts","filterState","filter","selectFilter","items","normalizedFilter","toLowerCase","contact","name","toLocaleLowerCase","includes","nanoid","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ButtonSubmit","_ref","_ref$type","type","children","_jsx","Button","colorScheme","variant","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","useSelector","dispatch","useDispatch","contactNameId","useMemo","contactNumberId","_jsxs","onSubmit","e","preventDefault","evt","normalizedName","find","isDublicate","alert","concat","addContactsThunk","htmlFor","Input","isInvalid","errorBorderColor","placeholder","onChange","value","target","required","mb","_ref2","_Fragment","w","addFilter","attachedStyles","horizontal","borderEndRadius","borderRadius","borderStartRadius","vertical","borderBottomRadius","borderTopRadius","gapStyles","spacing","marginStart","marginTop","ButtonGroup","forwardRef","props","ref","className","_props$spacing","isAttached","isDisabled","_props$orientation","orientation","rest","_className","cx","context","groupStyles","display","isVertical","ButtonGroupProvider","chakra","div","role","__css","flexDir","displayName","StackItem","flex","minWidth","Object","freeze","Stack","isInline","directionProp","direction","align","justify","wrap","divider","shouldWrapChildren","dividerStyle","options","prop","mapper","dividerStyles","column","my","mx","borderLeftWidth","borderBottomWidth","row","Array","isArray","map","item","isObject","keys","reduce","result","key","getDividerStyles","hasDivider","shouldUseChildren","clones","validChildren","Children","child","isValidElement","getValidChildren","index","isLast","_child","clonedDivider","cloneElement","_divider","Fragment","alignItems","justifyContent","flexDirection","flexWrap","gap","nameChange","numberChange","close","changeContactsThunk","autoComplete","_ref3","styles","onClick","ChangeContactForm","modalOpen","setModalOpen","onChangeContact","deleteContactsThunk","onDeleteContact","Modalwindow","_useSelector","isLoading","error","useEffect","getContactsThunk","itemsVisible","elements","ContactItems","isItemsVisible","Boolean","message","Container","omitThemingProps","centerContent","useStyleConfig","Heading","h2","p","Box","fontSize","AddContactForm","mt","Filter","ContactList"],"sourceRoot":""}