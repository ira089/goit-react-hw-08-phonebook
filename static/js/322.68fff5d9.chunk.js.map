{"version":3,"file":"static/js/322.68fff5d9.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/Filter.jsx","components/ContactItems/ContactItems.jsx","components/ContactList/ContactList.jsx","Pages/ContactPage/ContactPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"ContactForm_wrap__Z1N47\",\"formWrap\":\"ContactForm_formWrap__LBMtj\",\"formItem\":\"ContactForm_formItem__dbiTg\",\"btn\":\"ContactForm_btn__wll+u\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const selectContacts = state => state.contacts;\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = state => {\n  const filterState = selectFilter(state);\n  const { items } = selectContacts(state);\n  //   console.log(items);\n  //   console.log(filterState);\n  if (!filterState) {\n    return items;\n  }\n  const normalizedFilter = filterState.toLowerCase();\n  return items.filter(contact =>\n    contact.name.toLocaleLowerCase().includes(normalizedFilter)\n  );\n};\n","import { useState, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContactsThunk } from '../../redux/operations';\nimport { nanoid } from 'nanoid';\nimport styles from './ContactForm.module.css';\nimport { selectContacts } from '../../redux/selectors';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const { items } = useSelector(selectContacts);\n  // console.log(items);\n  // arr\n  const dispatch = useDispatch();\n\n  const handleChangeName = ({ target }) => {\n    const { value } = target;\n    setName(value);\n  };\n\n  const handleChangeNumber = ({ target }) => {\n    const { value } = target;\n    setPhone(value);\n  };\n\n  const isDublicate = evt => {\n    // console.log(evt);\n    const normalizedName = evt.toLowerCase();\n    const dublicate = items.find(\n      contact => contact.name.toLocaleLowerCase() === normalizedName\n    );\n    return dublicate;\n  };\n\n  const addTask = e => {\n    e.preventDefault();\n    if (isDublicate(name)) {\n      return alert(`${name} is already in contacts`);\n    }\n    dispatch(addContactsThunk({ name, phone }));\n    setName('');\n    setPhone('');\n  };\n\n  const contactNameId = useMemo(() => nanoid(), []);\n  const contactNumberId = useMemo(() => nanoid(), []);\n\n  return (\n    <form onSubmit={addTask} className={styles.formWrap}>\n      <label htmlFor={contactNameId} className={styles.formItem}>\n        Name\n        <input\n          onChange={handleChangeName}\n          value={name}\n          name=\"name\"\n          required\n          id={contactNameId}\n          placeholder=\"Name\"\n          type=\"text\"\n        ></input>\n      </label>\n\n      <label htmlFor={contactNumberId} className={styles.formItem}>\n        Phone\n        <input\n          onChange={handleChangeNumber}\n          value={phone}\n          name=\"phone\"\n          id={contactNumberId}\n          placeholder=\"Phone\"\n          required\n        ></input>\n      </label>\n\n      <button type=\"submit\" className={styles.btn}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"filter\":\"ContactList_filter__26Vdf\",\"btnDel\":\"ContactList_btnDel__M+VR9\"};","import { useDispatch } from 'react-redux';\nimport { addFilter } from '../../redux/filterSlice';\nimport styles from './ContactList.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const changeFitler = ({ target }) => {\n    dispatch(addFilter(target.value));\n  };\n\n  return (\n    <>\n      <p>Find contacts by name</p>\n      <input\n        className={styles.filter}\n        onChange={changeFitler}\n        name=\"filter\"\n        placeholder=\"Search\"\n      />\n    </>\n  );\n};\n\nexport default Filter;\n","import { useDispatch } from 'react-redux';\nimport { deleteContactsThunk } from '../../redux/operations';\nimport styles from '../ContactList/ContactList.module.css';\n\nconst ContactItems = ({ name, phone, id }) => {\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => {\n    const numberId = Number(id);\n    dispatch(deleteContactsThunk(numberId));\n  };\n\n  return (\n    <li key={id} id={id}>\n      {name}: {phone}{' '}\n      <button\n        className={styles.btnDel}\n        onClick={() => onDeleteContact(id)}\n        type=\"button\"\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default ContactItems;\n","import { useSelector, useDispatch } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport { selectFilteredContacts, selectContacts } from '../../redux/selectors';\nimport { getContactsThunk } from '../../redux/operations';\nimport styles from './ContactList.module.css';\nimport ContactItems from '../ContactItems/ContactItems';\n\nconst ContactList = () => {\n  const { isLoading, error } = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  const itemsVisible = useSelector(selectFilteredContacts);\n  // console.log(itemsVisible);\n  // Array\n\n  const elements = itemsVisible.map(item => (\n    <ContactItems\n      key={item.id}\n      id={item.id}\n      phone={item.phone}\n      name={item.name}\n    />\n  ));\n\n  const isItemsVisible = Boolean(itemsVisible.length);\n\n  return (\n    <>\n      {isLoading && <p>...Loading</p>}\n      {error && <p>{error.message}</p>}\n      {isItemsVisible && <ul className={styles.list}>{elements}</ul>}\n    </>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport styles from '../../components/ContactForm/ContactForm.module.css';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/ContactList/Filter';\nimport ContactList from 'components/ContactList/ContactList';\n\nconst ContactPage = () => {\n  return (\n    <div className={styles.wrap}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\nexport default ContactPage;\n"],"names":["nanoid","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","selectContacts","state","contacts","selectFilteredContacts","filterState","filter","selectFilter","items","normalizedFilter","toLowerCase","contact","name","toLocaleLowerCase","includes","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","phone","setPhone","useSelector","dispatch","useDispatch","contactNameId","useMemo","contactNumberId","_jsxs","onSubmit","e","preventDefault","evt","normalizedName","find","isDublicate","alert","concat","addContactsThunk","className","styles","children","htmlFor","_jsx","onChange","_ref","value","target","required","placeholder","type","_ref2","_Fragment","addFilter","onClick","numberId","Number","deleteContactsThunk","onDeleteContact","_useSelector","isLoading","error","useEffect","getContactsThunk","itemsVisible","elements","map","item","ContactItems","isItemsVisible","Boolean","message","ContactForm","Filter","ContactList"],"sourceRoot":""}