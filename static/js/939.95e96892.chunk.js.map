{"version":3,"file":"static/js/939.95e96892.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Button/Button.jsx","components/AddContactForm/AddContactForm.jsx","components/ContactList/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ChangeContactForm/ChangeContactForm.jsx","components/Modal/Modal.jsx","components/ContactItems/ContactItems.jsx","components/ContactList/ContactList.jsx","Pages/ContactPage/ContactPage.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts;\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = state => {\n  const filterState = selectFilter(state);\n  const { items } = selectContacts(state);\n\n  if (!filterState) {\n    return items;\n  }\n  const normalizedFilter = filterState.toLowerCase();\n  return items.filter(contact =>\n    contact.name.toLocaleLowerCase().includes(normalizedFilter)\n  );\n};\n","import React from 'react';\nimport { Button } from '@chakra-ui/react';\n\nexport const ButtonSubmit = ({ type = 'submit', children }) => {\n  return (\n    <Button colorScheme=\"teal\" variant=\"solid\" size=\"xs\" type={type}>\n      {children}\n    </Button>\n  );\n};\n","import { useState, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContactsThunk } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { nanoid } from 'nanoid';\nimport { ButtonSubmit } from 'components/Button/Button';\nimport { Input } from '@chakra-ui/react';\n\nconst AddContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const { items } = useSelector(selectContacts);\n  // console.log(items);\n  const dispatch = useDispatch();\n\n  const handleChangeName = ({ target }) => {\n    const { value } = target;\n    setName(value);\n  };\n\n  const handleChangeNumber = ({ target }) => {\n    const { value } = target;\n    setNumber(value);\n  };\n\n  const isDublicate = evt => {\n    // console.log(evt);\n    const normalizedName = evt.toLowerCase();\n    const dublicate = items.find(\n      contact => contact.name.toLocaleLowerCase() === normalizedName\n    );\n    return dublicate;\n  };\n\n  const addTask = e => {\n    e.preventDefault();\n    if (isDublicate(name)) {\n      return alert(`${name} is already in contacts`);\n    }\n    dispatch(addContactsThunk({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  const contactNameId = useMemo(() => nanoid(), []);\n  const contactNumberId = useMemo(() => nanoid(), []);\n\n  return (\n    <form onSubmit={addTask}>\n      <label htmlFor={contactNameId}>\n        Name\n        <Input\n          isInvalid\n          errorBorderColor=\"aquamarine\"\n          placeholder=\"Name\"\n          onChange={handleChangeName}\n          value={name}\n          name=\"name\"\n          required\n          id={contactNameId}\n          type=\"text\"\n        />\n      </label>\n\n      <label htmlFor={contactNumberId}>\n        Phone\n        <Input\n          mb={4}\n          isInvalid\n          errorBorderColor=\"aquamarine\"\n          onChange={handleChangeNumber}\n          value={number}\n          name=\"number\"\n          id={contactNumberId}\n          placeholder=\"Phone\"\n          required\n        />\n      </label>\n      <ButtonSubmit>Add contact</ButtonSubmit>\n    </form>\n  );\n};\n\nexport default AddContactForm;\n","import { useDispatch } from 'react-redux';\nimport { addFilter } from '../../redux/contacts/filterSlice';\nimport { Input } from '@chakra-ui/react';\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const changeFitler = ({ target }) => {\n    dispatch(addFilter(target.value));\n  };\n\n  return (\n    <>\n      <p>Find contacts by name</p>\n      <Input\n        w={300}\n        isInvalid\n        errorBorderColor=\"aquamarine\"\n        placeholder=\"Search\"\n        onChange={changeFitler}\n        name=\"filter\"\n      />\n    </>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { changeContactsThunk } from '../../redux/contacts/operations';\nimport { ButtonSubmit } from 'components/Button/Button';\nimport { Input, Stack } from '@chakra-ui/react';\n\nconst ChangeContactForm = ({ id, nameChange, numberChange, close }) => {\n  const [name, setName] = useState(nameChange);\n  const [number, setNumber] = useState(numberChange);\n\n  const dispatch = useDispatch();\n\n  const handleChangeName = ({ target }) => {\n    const { value } = target;\n    setName(value);\n  };\n\n  const handleChangeNumber = ({ target }) => {\n    const { value } = target;\n    setNumber(value);\n  };\n\n  const changeContact = e => {\n    e.preventDefault();\n\n    dispatch(changeContactsThunk({ id, name, number }));\n    setName('');\n    setNumber('');\n    close();\n  };\n\n  return (\n    <form onSubmit={changeContact}>\n      <Stack spacing={4} mb={4}>\n        <label>\n          Name\n          <Input\n            mb={3}\n            variant=\"outline\"\n            isInvalid\n            errorBorderColor=\"aquamarine\"\n            onChange={handleChangeName}\n            value={name}\n            name=\"name\"\n            type=\"text\"\n            autoComplete=\"off\"\n          />\n        </label>\n        <label>\n          Phone\n          <Input\n            variant=\"outline\"\n            isInvalid\n            errorBorderColor=\"aquamarine\"\n            onChange={handleChangeNumber}\n            value={number}\n            name=\"number\"\n            autoComplete=\"off\"\n          />\n        </label>\n      </Stack>\n      <ButtonSubmit>Change contact</ButtonSubmit>\n    </form>\n  );\n};\n\nexport default ChangeContactForm;\n","import React from 'react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalBody,\n  ModalCloseButton,\n} from '@chakra-ui/react';\nimport ChangeContactForm from 'components/ChangeContactForm/ChangeContactForm';\n\nconst Modalwindow = ({ close, id, name, number }) => {\n  return (\n    <Modal isOpen={true} onClose={close}>\n      <ModalOverlay />\n      <ModalContent p={6}>\n        <ModalCloseButton />\n        <ModalBody mt={8}>\n          <ChangeContactForm\n            id={id}\n            nameChange={name}\n            numberChange={number}\n            close={close}\n          />\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default Modalwindow;\n","import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { deleteContactsThunk } from '../../redux/contacts/operations';\nimport { ButtonGroup, Button } from '@chakra-ui/react';\nimport Modalwindow from 'components/Modal/Modal';\n\nconst ContactItems = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const showModal = () => {\n    setModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  const onDeleteContact = id => {\n    dispatch(deleteContactsThunk(id));\n  };\n\n  const onChangeContact = id => {\n    showModal();\n  };\n\n  return (\n    <>\n      <li key={id} id={id}>\n        {name}: {number}{' '}\n        <ButtonGroup variant=\"outline\" spacing=\"2\">\n          <Button\n            colorScheme=\"teal\"\n            variant=\"solid\"\n            size=\"xs\"\n            onClick={() => onDeleteContact(id)}\n            type=\"button\"\n          >\n            Delete\n          </Button>\n          <Button\n            colorScheme=\"teal\"\n            variant=\"solid\"\n            size=\"xs\"\n            onClick={() => onChangeContact(id)}\n            type=\"button\"\n          >\n            Change\n          </Button>\n        </ButtonGroup>\n      </li>\n      {modalOpen && (\n        <Modalwindow close={closeModal} id={id} name={name} number={number} />\n      )}\n    </>\n  );\n};\n\nexport default ContactItems;\n","import { useSelector, useDispatch } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport {\n  selectFilteredContacts,\n  selectContacts,\n} from '../../redux/contacts/selectors';\nimport { getContactsThunk } from '../../redux/contacts/operations';\nimport styles from './ContactList.module.css';\nimport ContactItems from '../ContactItems/ContactItems';\n\nconst ContactList = () => {\n  const { isLoading, error } = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  const itemsVisible = useSelector(selectFilteredContacts);\n  // console.log(itemsVisible);\n\n  const elements = itemsVisible.map(item => (\n    <ContactItems\n      key={item.id}\n      id={item.id}\n      number={item.number}\n      name={item.name}\n    />\n  ));\n\n  const isItemsVisible = Boolean(itemsVisible.length);\n\n  return (\n    <>\n      {isLoading && <p>...Loading</p>}\n      {error && <p>{error.message}</p>}\n      {isItemsVisible && <ul className={styles.list}>{elements}</ul>}\n    </>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport AddContactForm from 'components/AddContactForm/AddContactForm';\nimport Filter from 'components/ContactList/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { Box, Heading, Container } from '@chakra-ui/react';\n\nconst ContactPage = () => {\n  return (\n    <Container p={4}>\n      <Box>\n        <Heading fontSize={28}>Phonebook</Heading>\n      </Box>\n      <Box mb={6} w=\"50%\">\n        <AddContactForm />\n      </Box>\n      <Box mt={4}>\n        <Heading fontSize={20}>Contact</Heading>\n      </Box>\n      <Box>\n        <Filter />\n      </Box>\n      <Box>\n        <ContactList />\n      </Box>\n    </Container>\n  );\n  // return (\n  //   <div className={styles.wrap}>\n  //     <h1>Phonebook</h1>\n  //     <AddContactForm />\n\n  //     <h2>Contacts</h2>\n  //     <Filter />\n  //     <ContactList />\n  //   </div>\n  // );\n};\nexport default ContactPage;\n"],"names":["selectContacts","state","contacts","selectFilteredContacts","filterState","filter","selectFilter","items","normalizedFilter","toLowerCase","contact","name","toLocaleLowerCase","includes","ButtonSubmit","_ref","_ref$type","type","children","_jsx","Button","colorScheme","variant","size","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","useSelector","dispatch","useDispatch","contactNameId","useMemo","nanoid","contactNumberId","_jsxs","onSubmit","e","preventDefault","evt","normalizedName","find","isDublicate","alert","concat","addContactsThunk","htmlFor","Input","isInvalid","errorBorderColor","placeholder","onChange","value","target","required","id","mb","_ref2","_Fragment","w","addFilter","nameChange","numberChange","close","changeContactsThunk","Stack","spacing","autoComplete","_ref3","Modal","isOpen","onClose","ModalOverlay","ModalContent","p","ModalCloseButton","ModalBody","mt","ChangeContactForm","modalOpen","setModalOpen","onChangeContact","ButtonGroup","onClick","deleteContactsThunk","onDeleteContact","Modalwindow","_useSelector","isLoading","error","useEffect","getContactsThunk","itemsVisible","elements","map","item","ContactItems","isItemsVisible","Boolean","length","message","className","styles","Container","Box","Heading","fontSize","AddContactForm","Filter","ContactList"],"sourceRoot":""}